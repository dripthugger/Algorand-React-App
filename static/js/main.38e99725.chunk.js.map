{"version":3,"sources":["utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","utils/marketplace.js","contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","do","compileResponse","Uint8Array","result","createProductAction","senderAddress","console","log","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","compiledApprovalProgram","compiledClearProgram","note","marketplaceNote","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","myAlgoConnect","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyProductAction","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","map","tx","deleteProductAction","index","makeApplicationDeleteTxnFromObject","apid","getProductsAction","encodedNote","indexerClient","searchForTransactions","notePrefix","txType","minRound","transactionInfo","products","transactions","transaction","getApplication","push","lookupApplications","includeAll","response","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","Products","fetchBalance","setProducts","loading","setLoading","getProducts","then","catch","error","finally","_","useEffect","data","toast","Row","xs","sm","lg","App","setAddress","balance","setBalance","accountAddress","lookupAccountByID","_balance","account","connectWallet","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.38e99725.chunk.js","sourcesContent":["import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({ name, coverImg, connect }) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{ maxWidth: \"320px\" }}\n                >\n                    <img src={coverImg} alt=\"\" />\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst AddProduct = ({ createProduct }) => {\n    const [name, setName] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n\n    const isFormFilled = useCallback(() => {\n        return name && image && description && price > 0\n    }, [name, image, description, price]);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button\n                onClick={handleShow}\n                variant=\"dark\"\n                className=\"rounded-pill px-0\"\n                style={{ width: \"38px\" }}\n            >\n                <i className=\"bi bi-plus\"></i>\n            </Button>\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Product</Modal.Title>\n                </Modal.Header>\n                <Form>\n                    <Modal.Body>\n                        <FloatingLabel\n                            controlId=\"inputName\"\n                            label=\"Product name\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                onChange={(e) => {\n                                    setName(e.target.value);\n                                }}\n                                placeholder=\"Enter name of product\"\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputUrl\"\n                            label=\"Image URL\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Image URL\"\n                                value={image}\n                                onChange={(e) => {\n                                    setImage(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Description\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"description\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setDescription(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputPrice\"\n                            label=\"Price in ALGO\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Price\"\n                                onChange={(e) => {\n                                    setPrice(stringToMicroAlgos(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                    </Modal.Body>\n                </Form>\n                <Modal.Footer>\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"dark\"\n                        disabled={!isFormFilled()}\n                        onClick={() => {\n                            createProduct({\n                                name,\n                                image,\n                                description,\n                                price\n                            });\n                            handleClose();\n                        }}\n                    >\n                        Save product\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nAddProduct.propTypes = {\n    createProduct: PropTypes.func.isRequired,\n};\n\nexport default AddProduct;","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\n    const {name, image, description, price, sold, appId, owner} =\n        product;\n\n    const [count, setCount] = useState(1)\n\n    return (\n        <Col key={appId}>\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n                        <Identicon size={28} address={owner}/>\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\n                            {sold} Sold\n                        </Badge>\n                    </Stack>\n                </Card.Header>\n                <div className=\"ratio ratio-4x3\">\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\n                </div>\n                <Card.Body className=\"d-flex flex-column text-center\">\n                    <Card.Title>{name}</Card.Title>\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n                        <FloatingLabel\n                            controlId=\"inputCount\"\n                            label=\"Count\"\n                            className=\"w-25\"\n                        >\n                            <Form.Control\n                                type=\"number\"\n                                value={count}\n                                min=\"1\"\n                                max=\"10\"\n                                onChange={(e) => {\n                                    setCount(Number(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                        <Button\n                            variant=\"outline-dark\"\n                            onClick={() => buyProduct(product, count)}\n                            className=\"w-75 py-3\"\n                        >\n                            Buy for {microAlgosToString(price) * count} ALGO\n                        </Button>\n                        {product.owner === address &&\n                            <Button\n                                variant=\"outline-danger\"\n                                onClick={() => deleteProduct(product)}\n                                className=\"btn\"\n                            >\n                                <i className=\"bi bi-trash\"></i>\n                            </Button>\n                        }\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n};\n\nProduct.propTypes = {\n    address: PropTypes.string.isRequired,\n    product: PropTypes.instanceOf(Object).isRequired,\n    buyProduct: PropTypes.func.isRequired,\n    deleteProduct: PropTypes.func.isRequired\n};\n\nexport default Product;","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};","import algosdk from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    marketplaceNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\n\nimport {Buffer} from 'buffer';\n\nclass Product {\n    constructor(name, image, description, price, sold, appId, owner) {\n        this.name = name;\n        this.image = image;\n        this.description = description;\n        this.price = price;\n        this.sold = sold;\n        this.appId = appId;\n        this.owner = owner;\n    }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createProductAction = async (senderAddress, product) => {\n    console.log(\"Adding product...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n    let note = new TextEncoder().encode(marketplaceNote);\n    let name = new TextEncoder().encode(product.name);\n    let image = new TextEncoder().encode(product.image);\n    let description = new TextEncoder().encode(product.description);\n    let price = algosdk.encodeUint64(product.price);\n\n    let appArgs = [name, image, description, price]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get created application id and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index'];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n}\n\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const buyProductAction = async (senderAddress, product, count) => {\n    console.log(\"Buying product...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Build required app args as Uint8Array\n    let buyArg = new TextEncoder().encode(\"buy\")\n    let countArg = algosdk.encodeUint64(count);\n    let appArgs = [buyArg, countArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: product.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    // Create PaymentTxn\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: senderAddress,\n        to: product.owner,\n        amount: product.price * count,\n        suggestedParams: params\n    })\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray)\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\n// DELETE PRODUCT: ApplicationDeleteTxn\nexport const deleteProductAction = async (senderAddress, index) => {\n    console.log(\"Deleting application...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Create ApplicationDeleteTxn\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n        from: senderAddress, suggestedParams: params, appIndex: index,\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get application id of deleted application and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['txn']['txn'].apid;\n    console.log(\"Deleted app-id: \", appId);\n}\n\n// GET PRODUCTS: Use indexer\nexport const getProductsAction = async () => {\n    console.log(\"Fetching products...\")\n    let note = new TextEncoder().encode(marketplaceNote);\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do();\n    let products = []\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let product = await getApplication(appId)\n            if (product) {\n                products.push(product)\n            }\n        }\n    }\n    console.log(\"Products fetched.\")\n    return products\n}\n\nconst getApplication = async (appId) => {\n    try {\n        // 1. Get application by appId\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n        if (response.application.deleted) {\n            return null;\n        }\n        let globalState = response.application.params[\"global-state\"]\n\n        // 2. Parse fields of response and return product\n        let owner = response.application.params.creator\n        let name = \"\"\n        let image = \"\"\n        let description = \"\"\n        let price = 0\n        let sold = 0\n\n        const getField = (fieldName, globalState) => {\n            return globalState.find(state => {\n                return state.key === utf8ToBase64String(fieldName);\n            })\n        }\n\n        if (getField(\"NAME\", globalState) !== undefined) {\n            let field = getField(\"NAME\", globalState).value.bytes\n            name = base64ToUTF8String(field)\n        }\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n            let field = getField(\"IMAGE\", globalState).value.bytes\n            image = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n            description = base64ToUTF8String(field)\n        }\n\n        if (getField(\"PRICE\", globalState) !== undefined) {\n            price = getField(\"PRICE\", globalState).value.uint\n        }\n\n        if (getField(\"SOLD\", globalState) !== undefined) {\n            sold = getField(\"SOLD\", globalState).value.uint\n        }\n\n        return new Product(name, image, description, price, sold, appId, owner)\n    } catch (err) {\n        return null;\n    }\n}","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nglobal GroupSize\\nint 2\\n==\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l6\\nint 0\\nreturn\\nmain_l6:\\nbyte \\\"SOLD\\\"\\nbyte \\\"SOLD\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"tutorial-marketplace:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 3\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 3\\nbtoi\\napp_global_put\\nbyte \\\"SOLD\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddProduct from \"./AddProduct\";\nimport Product from \"./Product\";\nimport Loader from \"../utils/Loader\";\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\nimport { buyProductAction, createProductAction, deleteProductAction, getProductsAction, } from \"../../utils/marketplace\";\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\n\nconst Products = ({ address, fetchBalance }) => {\n    const [products, setProducts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const getProducts = async () => {\n        setLoading(true);\n        getProductsAction()\n            .then(products => {\n                if (products) {\n                    setProducts(products);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(_ => {\n                setLoading(false);\n            });\n    };\n\n    useEffect(() => {\n        getProducts();\n    }, []);\n\n\n    const createProduct = async (data) => {\n        setLoading(true);\n        createProductAction(address, data)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product added successfully.\" />);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error);\n                toast(<NotificationError text=\"Failed to create a product.\" />);\n                setLoading(false);\n            })\n    };\n\n    const buyProduct = async (product, count) => {\n        setLoading(true);\n        buyProductAction(address, product, count)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product bought successfully\" />);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error)\n                toast(<NotificationError text=\"Failed to purchase product.\" />);\n                setLoading(false);\n            })\n    };\n\n    const deleteProduct = async (product) => {\n        setLoading(true);\n        deleteProductAction(address, product.appId)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product deleted successfully\" />);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error)\n                toast(<NotificationError text=\"Failed to delete product.\" />);\n                setLoading(false);\n            })\n    };\n\n    if (loading) {\n        return <Loader />;\n    }\n    \n    return (\n        <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\n                <AddProduct createProduct={createProduct} />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n                <>\n                    {products.map((product, index) => (\n                        <Product\n                            address={address}\n                            product={product}\n                            buyProduct={buyProduct}\n                            deleteProduct={deleteProduct}\n                            key={index}\n                        />\n                    ))}\n                </>\n            </Row>\n        </>\n    );\n};\n\nProducts.propTypes = {\n    address: PropTypes.string.isRequired,\n    fetchBalance: PropTypes.func.isRequired\n};\n\nexport default Products;","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport coverImg from \"./assets/img/sandwich.jpg\"\n\nconst App = function AppWrapper() {\n\n    const [address, setAddress] = useState(null);\n    const [name, setName] = useState(null);\n    const [balance, setBalance] = useState(0);\n\n    const fetchBalance = async (accountAddress) => {\n        indexerClient.lookupAccountByID(accountAddress).do()\n            .then(response => {\n                const _balance = response.account.amount;\n                setBalance(_balance);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    const connectWallet = async () => {\n        myAlgoConnect.connect()\n            .then(accounts => {\n                const _account = accounts[0];\n                setAddress(_account.address);\n                setName(_account.name);\n                fetchBalance(_account.address);\n            }).catch(error => {\n                console.log('Could not connect to MyAlgo wallet');\n                console.error(error);\n            })\n    };\n\n    const disconnect = () => {\n        setAddress(null);\n        setName(null);\n        setBalance(null);\n    };\n\n    return (\n        <>\n            <Notification />\n            {address ? (\n                <Container fluid=\"md\">\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n                        <Nav.Item>\n                            <Wallet\n                                address={address}\n                                name={name}\n                                amount={balance}\n                                disconnect={disconnect}\n                                symbol={\"ALGO\"}\n                            />\n                        </Nav.Item>\n                    </Nav>\n                    <main>\n                        <Products address={address} fetchBalance={fetchBalance}/>\n                    </main>\n                </Container>\n            ) : (\n                <Cover name={\"Street Food\"} coverImg={coverImg} connect={connectWallet} />\n            )}\n        </>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const marketplaceNote = \"tutorial-marketplace:uv1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}